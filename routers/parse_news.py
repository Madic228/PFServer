from fastapi import APIRouter, HTTPException
from apscheduler.schedulers.background import BackgroundScheduler

from db.database import get_db_connection
from services.parser_service.period_parser import PeriodNewsParser

router = APIRouter()
scheduler = BackgroundScheduler()

# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
def run_period_parser(period_days: int = 7, check_previous_days: int = 2, max_articles: int = 10):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    parser = PeriodNewsParser(
        period_days=period_days,
        check_previous_days=check_previous_days,
        test_articles_count=max_articles
    )
    
    try:
        articles = parser.parse()
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–±—Ä–∞–Ω–æ {len(articles)} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π.")
        return articles
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
def schedule_period_parser(interval_hours: int, period_days: int = 7, check_previous_days: int = 2, max_articles: int = 10):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ë–î –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.

    :param interval_hours: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–∞—Ö.
    :param period_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.
    :param check_previous_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    :param max_articles: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.
    """
    conn = get_db_connection()
    with conn.cursor() as cursor:
        cursor.execute("""
            INSERT INTO parser_schedule (topic_id, interval_hours, max_articles, period_days, check_previous_days)
            VALUES (0, %s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE 
                interval_hours=%s, 
                max_articles=%s, 
                period_days=%s, 
                check_previous_days=%s
        """, (interval_hours, max_articles, period_days, check_previous_days,
              interval_hours, max_articles, period_days, check_previous_days))
    conn.commit()
    conn.close()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –±—ã–ª–∞
    if scheduler.get_job("period_parser"):
        scheduler.remove_job("period_parser")

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(
        run_period_parser, 
        'interval', 
        hours=interval_hours, 
        args=[period_days, check_previous_days, max_articles], 
        id="period_parser"
    )
    print(f"‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∫–∞–∂–¥—ã–µ {interval_hours} —á–∞—Å–æ–≤.")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@router.post("/parse_period/")
def parse_period_news(interval_hours: int, period_days: int = 7, check_previous_days: int = 2, max_articles: int = 10):
    """
    **–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä.**

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - `interval_hours` (int): –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, `6` –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤).
    - `period_days` (int, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.
    - `check_previous_days` (int, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    - `max_articles` (int, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å–±–æ—Ä–∞.

    **–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**
    ```json
    {
        "interval_hours": 6,
        "period_days": 7,
        "check_previous_days": 2,
        "max_articles": 10
    }
    ```
    **–û—Ç–≤–µ—Ç:**
    ```json
    {
        "message": "–ü–∞—Ä—Å–∏–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤."
    }
    ```
    """
    try:
        schedule_period_parser(interval_hours, period_days, check_previous_days, max_articles)

        # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        run_period_parser(period_days, check_previous_days, max_articles)

        return {"message": f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —Å—Ä–∞–∑—É –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∫–∞–∂–¥—ã–µ {interval_hours} —á–∞—Å–æ–≤."}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞: {str(e)}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
@router.put("/update_schedule/")
def update_schedule(interval_hours: int, period_days: int = 7, check_previous_days: int = 2, max_articles: int = 10):
    """
    **–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.**

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - `interval_hours` (int): –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö.
    - `period_days` (int, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.
    - `check_previous_days` (int, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    - `max_articles` (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π.

    **–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**
    ```json
    {
        "interval_hours": 12,
        "period_days": 7,
        "check_previous_days": 2,
        "max_articles": 15
    }
    ```
    **–û—Ç–≤–µ—Ç:**
    ```json
    {
        "message": "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 12 —á–∞—Å–æ–≤. –ü–µ—Ä–∏–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞: 7 –¥–Ω–µ–π."
    }
    ```
    """
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        schedule_period_parser(interval_hours, period_days, check_previous_days, max_articles)

        # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        run_period_parser(period_days, check_previous_days, max_articles)
        return {"message": f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {interval_hours} —á–∞—Å–æ–≤. –ü–µ—Ä–∏–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞: {period_days} –¥–Ω–µ–π."}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
@router.delete("/delete_schedule/")
def delete_schedule():
    """
    **–£–¥–∞–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞.**

    **–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**
    ```
    DELETE /delete_schedule/
    ```
    **–û—Ç–≤–µ—Ç:**
    ```json
    {
        "message": "–ü–∞—Ä—Å–∏–Ω–≥ —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
    }
    ```
    """
    conn = get_db_connection()
    with conn.cursor() as cursor:
        cursor.execute("DELETE FROM parser_schedule WHERE topic_id = 0")
    conn.commit()
    conn.close()

    if scheduler.get_job("period_parser"):
        scheduler.remove_job("period_parser")

    return {"message": "–ü–∞—Ä—Å–∏–Ω–≥ —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
def load_scheduled_jobs():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –∏–∑ –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    """
    conn = get_db_connection()
    with conn.cursor() as cursor:
        cursor.execute("SELECT interval_hours, max_articles, period_days, check_previous_days FROM parser_schedule WHERE topic_id = 0")
        schedule = cursor.fetchone()
    conn.close()

    if schedule:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂ –≤ —Å–ª–æ–≤–∞—Ä—å
        schedule_dict = {
            "interval_hours": schedule[0],
            "max_articles": schedule[1],
            "period_days": schedule[2],
            "check_previous_days": schedule[3]
        }
        scheduler.add_job(
            run_period_parser, 
            'interval', 
            hours=schedule_dict["interval_hours"], 
            args=[schedule_dict["period_days"], schedule_dict["check_previous_days"], schedule_dict["max_articles"]], 
            id="period_parser"
        )
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∫–∞–∂–¥—ã–µ {schedule_dict['interval_hours']} —á–∞—Å–æ–≤, {schedule_dict['max_articles']} —Å—Ç–∞—Ç–µ–π).")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@router.post("/parse_once/")
def parse_once(start_date: str, end_date: str, max_articles: int = 10):
    """
    **–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.**

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - `start_date` (str): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
    - `end_date` (str): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
    - `max_articles` (int, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å–±–æ—Ä–∞.

    **–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**
    ```json
    {
        "start_date": "03.05.2025",
        "end_date": "10.05.2025",
        "max_articles": 10
    }
    ```
    **–û—Ç–≤–µ—Ç:**
    ```json
    {
        "message": "–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –°–æ–±—Ä–∞–Ω–æ 10 —Å—Ç–∞—Ç–µ–π.",
        "articles_count": 10
    }
    ```
    """
    try:
        parser = PeriodNewsParser(
            parsing_mode="custom_period",
            start_date=start_date,
            end_date=end_date,
            total_pages=0,
            test_articles_count=max_articles
        )
        
        articles = parser.parse()
        return {
            "message": f"–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –°–æ–±—Ä–∞–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π.",
            "articles_count": len(articles)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
scheduler.start()
load_scheduled_jobs()
