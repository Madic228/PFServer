from fastapi import APIRouter, HTTPException
from apscheduler.schedulers.background import BackgroundScheduler

from db.database import get_db_connection
from services.parser_service.theme1_parser import Theme1NewsParser
from services.parser_service.theme2_parser import Theme2NewsParser
from services.parser_service.theme3_parser import Theme3NewsParser
from services.parser_service.theme4_parser import Theme4NewsParser

router = APIRouter()
scheduler = BackgroundScheduler()


# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö —Ç–µ–º —Å—Ä–∞–∑—É
def run_all_parsers(max_articles: int = 10):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Ç–µ–º –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç–∞—Ç–µ–π."""
    parsers = [
        Theme1NewsParser("https://realty.rbc.ru/industry/", topic_id=1),
        Theme2NewsParser("https://realty.ria.ru/tag_thematic_category_Zakonodatelstvo/", topic_id=2),
        Theme3NewsParser("https://www.e1.ru/text/theme/37211/", topic_id=3),
        Theme4NewsParser("https://www.e1.ru/text/tags/zastroyschik/", topic_id=4),
    ]

    for parser in parsers:
        try:
            parser.run(max_articles=max_articles)
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è topic_id={parser.topic_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–±—Ä–∞–Ω–æ {max_articles} —Å—Ç–∞—Ç–µ–π.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ topic_id={parser.topic_id}: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
def schedule_all_parsers(interval_hours: int, max_articles: int = 10):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ë–î –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.

    :param interval_hours: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–∞—Ö.
    :param max_articles: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ.
    """
    conn = get_db_connection()
    with conn.cursor() as cursor:
        cursor.execute("""
            INSERT INTO parser_schedule (topic_id, interval_hours, max_articles)
            VALUES (0, %s, %s)
            ON DUPLICATE KEY UPDATE interval_hours=%s, max_articles=%s
        """, (interval_hours, max_articles, interval_hours, max_articles))
    conn.commit()
    conn.close()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –±—ã–ª–∞
    if scheduler.get_job("all_parsers"):
        scheduler.remove_job("all_parsers")

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(run_all_parsers, 'interval', hours=interval_hours, args=[max_articles], id="all_parsers")
    print(f"‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –í–°–ï–• —Ç–µ–º —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ {interval_hours} —á–∞—Å–æ–≤.")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö —Ç–µ–º –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@router.post("/parse_all/")
def parse_all_news(interval_hours: int, max_articles: int = 10):
    """
    **–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Ç–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä.**

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - `interval_hours` (int): –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, `6` –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤).
    - `max_articles` (int, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã.

    **–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**
    ```json
    {
        "interval_hours": 6,
        "max_articles": 10
    }
    ```
    **–û—Ç–≤–µ—Ç:**
    ```json
    {
        "message": "–ü–∞—Ä—Å–∏–Ω–≥ –í–°–ï–• —Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤."
    }
    ```
    """
    try:
        schedule_all_parsers(interval_hours, max_articles)

        # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        run_all_parsers(max_articles)

        return {"message": f"–ü–∞—Ä—Å–∏–Ω–≥ –í–°–ï–• —Ç–µ–º –∑–∞–ø—É—â–µ–Ω —Å—Ä–∞–∑—É –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∫–∞–∂–¥—ã–µ {interval_hours} —á–∞—Å–æ–≤."}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞: {str(e)}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
@router.put("/update_schedule/")
def update_schedule(interval_hours: int, max_articles: int = 10):
    """
    **–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.**

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - `interval_hours` (int): –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö.
    - `max_articles` (int): –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã.

    **–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**
    ```json
    {
        "interval_hours": 12,
        "max_articles": 15
    }
    ```
    **–û—Ç–≤–µ—Ç:**
    ```json
    {
        "message": "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 12 —á–∞—Å–æ–≤. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π: 15."
    }
    ```
    """
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        schedule_all_parsers(interval_hours, max_articles)

        # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Ç–µ–º –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        run_all_parsers(max_articles)
        return {"message": f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {interval_hours} —á–∞—Å–æ–≤. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π: {max_articles}."}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
@router.delete("/delete_schedule/")
def delete_schedule():
    """
    **–£–¥–∞–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö —Ç–µ–º.**

    **–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**
    ```
    DELETE /delete_schedule/
    ```
    **–û—Ç–≤–µ—Ç:**
    ```json
    {
        "message": "–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Ç–µ–º —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
    }
    ```
    """
    conn = get_db_connection()
    with conn.cursor() as cursor:
        cursor.execute("DELETE FROM parser_schedule WHERE topic_id = 0")
    conn.commit()
    conn.close()

    if scheduler.get_job("all_parsers"):
        scheduler.remove_job("all_parsers")

    return {"message": "–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Ç–µ–º —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
def load_scheduled_jobs():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –∏–∑ –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    """
    conn = get_db_connection()
    with conn.cursor() as cursor:
        cursor.execute("SELECT interval_hours, max_articles FROM parser_schedule WHERE topic_id = 0")
        schedule = cursor.fetchone()
    conn.close()

    if schedule:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂ –≤ —Å–ª–æ–≤–∞—Ä—å
        schedule_dict = {
            "interval_hours": schedule[0],
            "max_articles": schedule[1]
        }
        scheduler.add_job(run_all_parsers, 'interval', hours=schedule_dict["interval_hours"], args=[schedule_dict["max_articles"]], id="all_parsers")
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö —Ç–µ–º (–∫–∞–∂–¥—ã–µ {schedule_dict['interval_hours']} —á–∞—Å–æ–≤, {schedule_dict['max_articles']} —Å—Ç–∞—Ç–µ–π –Ω–∞ —Ç–µ–º—É).")


# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
scheduler.start()
load_scheduled_jobs()
